Learning diary

    Time spent:

    Day0: 0.25h, wrote the outline
    Day1: 3h, geometry and skeleton for reading the points from file and
    methods for line sweep
    Day2: 3h, data structures and naive intersection matching ready
    Day3: 4h, tests for data structures and geometry and fixes to those
    classes that tests revealed
    Day4: 3h, handling of vertical lines, checking that intersection points
    are not calculated twice and fast insertion to the priority queue
    Day5: 2h, testing, correcting mistakes and special cases, still battling
    with the three lines intersect at the same point
    Day6: 4h, last special case squished, output and code refactoring,
    testing, random lineset generation
    Day7: 1h, project plan and report, some more analysis data

    Diary:

    I'm a sixth year computer science student so the programming side of this
project isn't anything new, but I'm excited to implement something from the
scratch.

    Days 1-3
    I started the project thinking that this can't be too hard, but now when I
have finished the data structures they were lot more work than I thought. Not
too hard but more work. I certainly learned a lot about line segment
intersections, before the project I thought about line intersections, that are
much easier. I figured out my own solution to line segment intersections, it
ain't the best one and not any of the solutions I found on the internet
afterwards, but it works. My priority queue is quite inefficient, as it should
be a binary tree and not a list, but we'll get to that if we have time. Writing
binary tree from scratch is a pain, I could use some library, but then it's
not the same, I would like to do this from scratch without any external libraries.
    
    Day 4
    I noticed that I don't have to use a binary tree to achieve log(n) operating
time on the priority queue, I can just use binary search to insert the items
to list that we are keeping sorted, that way inserts are log(n) and fetches
are constants. I handled many of the special cases in the Line class so the
main class keeps clean of the special handling code and is more readable (I
hope)

    Day 5
    Today was testing and little mistakes in my test line definitions kept me
from getting the correct result (vertical line was defined from bottom-up and
not up-bottom, as I was expecting in the code). I seemed to be getting correct
results, same that the naive and my visual analysis gets. But when I added the
final special case that three lines intersect in the same point, my neighbour
