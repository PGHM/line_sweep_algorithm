Project plan

Sweep line algorithm to detect line segment intersections

The purpose of this project is to develope algorithm to detect intersections
of line segments in x,y- coordinate system. And to spesify that, the goal is
to develop algorithm that works faster than the naive algorithm that just
tests every line against every other line, so it works in O(n^2) complexity.
The purpose is to develop so called line sweep algorithm to calculate the
intersections in O(n*log(n)) time. The algorithm will work as follows.

The sweep line will go from smallest x-coordinate to the largest x-coordinate
and stop at important events, that are start of a line, end of a line and
intersection of two lines. At the start of the line the algorithm will add the
line to a neighbour list, a data structure that holds the order that lines
intersect the sweep line. Whenever new neighbours are introduced to each
other, intersection will be checked between those lines, because it is
guaranteed that lines will become neighbours at some point before they
intersect. At intersection points we switch the intersecting lines in the
neighbour queue. At the end point of a line we remove the line from the
neighbouring list.

Before we start the algorithm, we will insert all the points we know
beforehand, the start and end points of the lines, in to a priority queue that
has the x coordinate as the first priority. The lowest x-coordinate will be on
the top of the queue. Secondary priorities are the highest y-coordinate and
the intersections points will be higher than start points and then end points,
because otherwise we might miss some intersections.

There is no simplifications or limitations in this solution, we will handle
all the special cases accordingly and get all the intersection points. Special
cases include lines that are parallel to the sweep line, three lines
intersecting at same point and two parallel lines.

Test data we shall generate ourselves. A small set that has all the special
cases nicely presented can be generated by hand so it's easy to test and look
for errors in a small data set. Then we will make a random line segment
generation algorithm that will generate larger random sets. You can spesify
the amount of lines and the approximate length of the random lines when
generating the lines. We will test with 100 to 10000 lines, and more if it is
sensible (the computing times might be long).

We'll keep track of the time consumed by each part of the project and keep
learning diary that is part of the course anyway.
